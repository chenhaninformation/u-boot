This branch is for espressobin board and it is based on marvell u-boot branch
"u-boot-2017.03-armada-17.10", please refer to:
https://github.com/MarvellEmbeddedProcessors/u-boot-marvell
checkout to branch "u-boot-2017.03-armada-17.10"

You can find documentation at both the mainline of u-boot and most recent
release of marvell u-boot above, we only provice some of the build steps and
some note.

Note
====

1.ESPRESSObin have a BOOT ROM on chip, which will support the SoC boot from
different devices by setting the jumpper descripted in:
http://wiki.espressobin.net/tiki-index.php?page=Bootloader+recovery+via+UART

The BOOT ROM can boot the SoC from storage device below:
a.Serial NOR Flash Download Mode	(J10:1-2, J3:2-3, J11:2-3)
b.eMMC Download Mode			(J10:2-3, J3:1-2, J11:2-3)
c.eMMC Alternate Download Mode		(J10:1-2, J3:1-2, J11:2-3)
d.SATA Download Mode			(J10:2-3, J3:2-3, J11:1-2)
e.Serial NAND Flash Download Mode	(J10:1-2, J3:2-3, J11:1-2)
f.UART Mode				(J10:2-3, J3:1-2, J11:1-2)

2.This u-boot compiled binary shoud wrapper by ATF (ARM Trusted Firmware) in
order to boot.

The ATF documentation can be find here:
https://github.com/chenhaninformation/arm-trusted-firmware

3.After carefully tested, only marvell u-boot branch
"u-boot-2017.03-armada-17.10" work with marvell ATF branch
"atf-v1.3-armada-17.10". In order to reduce workload, we decide to working on
those two old branch rather than fix boot issue by using the most recent
release of u-boot and ATF.

4.Using the branches above is not enough, compile the u-boot with Ubuntu 18.04
default gcc (gcc version 7) will cause the u-boot to access the wrong memory
region reserved by ATF. By carefully tested, compile the u-boot with gcc-5 can
solve the problem.

WARNING: Tested ONLY using Linaro release gcc, with version of gcc-5.2 and
gcc-5.5. Never tested with original gcc-5. Tested compiler can be find here:
http://wiki.espressobin.net/tiki-index.php?page=Build+From+Source+-+Toolchain

Build Step
==========

Build U-boot
============

Normal compile step are shown in follow:
1.export CROSS_COMPILE=/path/to/aarch64/compiler
2.make defconfig
3.make

While in our case, we need download or install gcc-5 instead of using the
default conpiler from Debian/Ubuntu.

Note: Put the $PATH at the end of the sentence, make sure we cover the default
finding path /usr/bin.

1.export PATH=/path/to/linaro-gcc-5/bin:$PATH
2.export CROSS_COMPILE=aarch64-linux-gnu-
3.make mvebu_espressobin-88f3720_defconfig # espressobin default config file
4.make DEVICE_TREE=armada-3720-espressobin

Then you will see a u-boot.bin came out at the top directory of u-boot.
Any fether reading please refer to:
http://wiki.espressobin.net/tiki-index.php?page=Build+From+Source+-+Bootloader

Config U-boot
=============

1.Some of the CONFIG_* is NOT generated by kbuid system, but in a include *.h
file in directory include/configs/*.h.

2.During build process, file include/configs/mvebu_armada-37xx.h will be
included and merged into .config with defconfig file. Some config will not be
configured via kbuild, you should edit file mvebu_armada-37xx.h manually, and
this file will include another file include/config/mvebu_armada-common.h.

3.Boot device need be specified during build process, and it can be selected
via kbuild process:

Command line interface -->
	Misc commands -->
		MVEBU commands -->
			Flash for image -->
				SPI flash boot (CONFIG_MVEBU_SPI_BOOT)
				eMMC flash boot (CONFIG_MVEBU_MMC_BOOT)

After config the boot device, more configs are selected in file
include/config/mvebu_armada-common.h by those two CONFIG_* including where to
store the u-boot environment.

The default boot device is boot from SPI NOR flash, the SPI flash layout may
look like this:

-----------------------------------------------------------------
|               U-boot Image                    |   U-boot ENV  |
-----------------------------------------------------------------
0x0                                             0x3f0000        0x400000

Where the 0x400000 is the size of the SPI NOR flash, which set default as 4M
byte.

TODO
====

1.Add link to ATF.
